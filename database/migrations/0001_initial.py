# Generated by Django 4.1 on 2022-08-15 20:59

import uuid

import common.fields
import common.utils
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(blank=True, null=True, verbose_name="last login"),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(blank=True, max_length=150, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(blank=True, max_length=150, verbose_name="last name"),
                ),
                (
                    "email",
                    models.EmailField(blank=True, max_length=254, verbose_name="email address"),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined"),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                ("can_use_api", models.BooleanField(default=False)),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Building",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                (
                    "id",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(blank=True, max_length=128)),
                ("description", models.TextField(blank=True)),
                (
                    "raw_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                ("exists", models.BooleanField(default=True)),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
                (
                    "next_building",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="previous_building",
                        to="database.building",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Culture",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                (
                    "id",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(blank=True, max_length=128)),
                ("description", models.TextField(blank=True)),
                (
                    "raw_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                ("exists", models.BooleanField(default=True)),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Doctrine",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                (
                    "id",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(blank=True, max_length=128)),
                ("description", models.TextField(blank=True)),
                (
                    "raw_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                ("exists", models.BooleanField(default=True)),
                ("group", models.CharField(blank=True, max_length=32)),
                ("multiple", models.SmallIntegerField(blank=True, null=True)),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Dynasty",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                (
                    "id",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(blank=True, max_length=128)),
                ("description", models.TextField(blank=True)),
                (
                    "raw_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                ("exists", models.BooleanField(default=True)),
                ("prefix", models.CharField(blank=True, max_length=16)),
                ("coa_text", models.TextField(blank=True)),
                (
                    "coa_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        editable=False,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                (
                    "culture",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="dynasties",
                        to="database.culture",
                    ),
                ),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "dynasties",
            },
        ),
        migrations.CreateModel(
            name="Holding",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                (
                    "id",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(blank=True, max_length=128)),
                ("description", models.TextField(blank=True)),
                (
                    "raw_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                ("exists", models.BooleanField(default=True)),
                (
                    "buildings",
                    models.ManyToManyField(blank=True, related_name="holdings", to="database.building"),
                ),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
                (
                    "primary_building",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="primary_holding",
                        to="database.building",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="HolySite",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                (
                    "id",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(blank=True, max_length=128)),
                ("description", models.TextField(blank=True)),
                (
                    "raw_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                ("exists", models.BooleanField(default=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Law",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                (
                    "id",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(blank=True, max_length=128)),
                ("description", models.TextField(blank=True)),
                (
                    "raw_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                ("exists", models.BooleanField(default=True)),
                (
                    "group",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("realm_law", "Realm law"),
                            ("succession_faith", "Succession faith law"),
                            ("succession_order_laws", "Succession order law"),
                            ("succession_gender_laws", "Succession gender law"),
                            ("title_succession_laws", "Title succession law"),
                        ],
                        max_length=32,
                    ),
                ),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MenAtArms",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                (
                    "id",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(blank=True, max_length=128)),
                ("description", models.TextField(blank=True)),
                (
                    "raw_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                ("exists", models.BooleanField(default=True)),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("archer_cavalry", "Archer cavalry"),
                            ("archers", "Archers"),
                            ("camel_cavalry", "Camel cavalry"),
                            ("elephant_cavalry", "Elephant cavalry"),
                            ("heavy_cavalry", "Heavy cavalry"),
                            ("heavy_infantry", "Heavy infantry"),
                            ("light_cavalry", "Light cavalry"),
                            ("pikemen", "Pikemen"),
                            ("siege_weapon", "Siege weapon"),
                            ("skirmishers", "Skirmishers"),
                        ],
                        max_length=16,
                    ),
                ),
                ("stack", models.PositiveSmallIntegerField(blank=True, null=True)),
                ("damage", models.PositiveSmallIntegerField(blank=True, null=True)),
                ("toughness", models.PositiveSmallIntegerField(blank=True, null=True)),
                ("pursuit", models.PositiveSmallIntegerField(blank=True, null=True)),
                ("screen", models.PositiveSmallIntegerField(blank=True, null=True)),
                ("siege_tier", models.PositiveSmallIntegerField(blank=True, null=True)),
                ("siege_value", models.FloatField(blank=True, null=True)),
                ("can_be_hired", models.BooleanField(blank=True, null=True)),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "men-at-arms",
                "verbose_name_plural": "men-at-arms",
            },
        ),
        migrations.CreateModel(
            name="Province",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                ("name", models.CharField(blank=True, max_length=128)),
                ("description", models.TextField(blank=True)),
                (
                    "raw_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                ("exists", models.BooleanField(default=True)),
                ("id", models.PositiveIntegerField(primary_key=True, serialize=False)),
                ("winter_severity", models.FloatField(blank=True, null=True)),
                (
                    "culture",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="provinces",
                        to="database.culture",
                    ),
                ),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
                (
                    "holding",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="provinces",
                        to="database.holding",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Terrain",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                (
                    "id",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(blank=True, max_length=128)),
                ("description", models.TextField(blank=True)),
                (
                    "raw_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                ("exists", models.BooleanField(default=True)),
                ("color", models.CharField(blank=True, max_length=16)),
                ("movement_speed", models.FloatField(blank=True, null=True)),
                ("combat_width", models.FloatField(blank=True, null=True)),
                ("audio_parameter", models.FloatField(blank=True, null=True)),
                ("supply_limit", models.FloatField(blank=True, null=True)),
                ("development_growth", models.FloatField(blank=True, null=True)),
                ("attacker_hard_casualty", models.FloatField(blank=True, null=True)),
                ("attacker_retreat_losses", models.FloatField(blank=True, null=True)),
                ("defender_hard_casualty", models.FloatField(blank=True, null=True)),
                ("defender_retreat_losses", models.FloatField(blank=True, null=True)),
                ("defender_advantage", models.SmallIntegerField(blank=True, null=True)),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Title",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                (
                    "id",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(blank=True, max_length=128)),
                ("description", models.TextField(blank=True)),
                (
                    "raw_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                ("exists", models.BooleanField(default=True)),
                (
                    "tier",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("barony", "Barony"),
                            ("county", "County"),
                            ("duchy", "Duchy"),
                            ("kingdom", "Kingdom"),
                            ("empire", "Empire"),
                        ],
                        max_length=8,
                    ),
                ),
                ("prefix", models.CharField(blank=True, max_length=16)),
                ("color1", models.CharField(blank=True, max_length=8)),
                ("color2", models.CharField(blank=True, max_length=8)),
                (
                    "capital",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="database.title",
                    ),
                ),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
                (
                    "de_jure_liege",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="de_jure_vassals",
                        to="database.title",
                    ),
                ),
                (
                    "province",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="title",
                        to="database.province",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Trait",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                (
                    "id",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(blank=True, max_length=128)),
                ("description", models.TextField(blank=True)),
                (
                    "raw_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                ("exists", models.BooleanField(default=True)),
                ("is_group", models.BooleanField(default=False)),
                ("is_good", models.BooleanField(blank=True, null=True)),
                ("is_genetic", models.BooleanField(blank=True, null=True)),
                ("is_physical", models.BooleanField(blank=True, null=True)),
                ("is_health", models.BooleanField(blank=True, null=True)),
                ("is_fame", models.BooleanField(blank=True, null=True)),
                ("is_incapacitating", models.BooleanField(blank=True, null=True)),
                ("is_immortal", models.BooleanField(blank=True, null=True)),
                ("can_inbred", models.BooleanField(blank=True, null=True)),
                ("can_have_children", models.BooleanField(blank=True, null=True)),
                ("can_inherit", models.BooleanField(blank=True, null=True)),
                ("can_not_marry", models.BooleanField(blank=True, null=True)),
                ("can_be_taken", models.BooleanField(blank=True, null=True)),
                ("cost", models.SmallIntegerField(blank=True, null=True)),
                ("inherit_chance", models.SmallIntegerField(blank=True, null=True)),
                ("diplomacy", models.SmallIntegerField(blank=True, null=True)),
                ("martial", models.SmallIntegerField(blank=True, null=True)),
                ("stewardship", models.SmallIntegerField(blank=True, null=True)),
                ("intrigue", models.SmallIntegerField(blank=True, null=True)),
                ("learning", models.SmallIntegerField(blank=True, null=True)),
                ("prowess", models.SmallIntegerField(blank=True, null=True)),
                ("health", models.FloatField(blank=True, null=True)),
                ("fertility", models.FloatField(blank=True, null=True)),
                ("monthly_prestige", models.FloatField(blank=True, null=True)),
                ("monthly_prestige_mult", models.FloatField(blank=True, null=True)),
                ("monthly_piety", models.FloatField(blank=True, null=True)),
                ("monthly_piety_mult", models.FloatField(blank=True, null=True)),
                ("same_opinion", models.SmallIntegerField(blank=True, null=True)),
                ("opposite_opinion", models.SmallIntegerField(blank=True, null=True)),
                ("general_opinion", models.SmallIntegerField(blank=True, null=True)),
                ("attraction_opinion", models.SmallIntegerField(blank=True, null=True)),
                ("vassal_opinion", models.SmallIntegerField(blank=True, null=True)),
                ("clergy_opinion", models.SmallIntegerField(blank=True, null=True)),
                ("same_faith_opinion", models.SmallIntegerField(blank=True, null=True)),
                ("dynasty_opinion", models.SmallIntegerField(blank=True, null=True)),
                ("house_opinion", models.SmallIntegerField(blank=True, null=True)),
                ("level", models.PositiveSmallIntegerField(blank=True, null=True)),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="traits",
                        to="database.trait",
                    ),
                ),
                ("opposites", models.ManyToManyField(blank=True, to="database.trait")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Tradition",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                (
                    "id",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(blank=True, max_length=128)),
                ("description", models.TextField(blank=True)),
                (
                    "raw_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                ("exists", models.BooleanField(default=True)),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("combat", "Combat"),
                            ("law", "Law"),
                            ("realm", "Realm"),
                            ("regional", "Regional"),
                            ("ritual", "Ritual"),
                            ("societal", "Societal"),
                        ],
                        max_length=8,
                    ),
                ),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Religion",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                (
                    "id",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(blank=True, max_length=128)),
                ("description", models.TextField(blank=True)),
                (
                    "raw_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                ("exists", models.BooleanField(default=True)),
                ("group", models.CharField(blank=True, max_length=32)),
                ("color", models.CharField(blank=True, max_length=16)),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
                (
                    "doctrines",
                    models.ManyToManyField(blank=True, related_name="religions", to="database.doctrine"),
                ),
                (
                    "holy_sites",
                    models.ManyToManyField(blank=True, related_name="religions", to="database.holysite"),
                ),
                (
                    "men_at_arms",
                    models.ManyToManyField(blank=True, related_name="religions", to="database.menatarms"),
                ),
                (
                    "religious_head",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="religions",
                        to="database.title",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="province",
            name="religion",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="provinces",
                to="database.religion",
            ),
        ),
        migrations.AddField(
            model_name="province",
            name="terrain",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="provinces",
                to="database.terrain",
            ),
        ),
        migrations.CreateModel(
            name="Nickname",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                (
                    "id",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(blank=True, max_length=128)),
                ("description", models.TextField(blank=True)),
                (
                    "raw_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                ("exists", models.BooleanField(default=True)),
                ("is_bad", models.BooleanField(default=False)),
                ("is_prefix", models.BooleanField(default=False)),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="NameList",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                (
                    "id",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(blank=True, max_length=128)),
                ("description", models.TextField(blank=True)),
                (
                    "raw_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                ("exists", models.BooleanField(default=True)),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MartialCustom",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                (
                    "id",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(blank=True, max_length=128)),
                ("description", models.TextField(blank=True)),
                (
                    "raw_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                ("exists", models.BooleanField(default=True)),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Language",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                (
                    "id",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(blank=True, max_length=128)),
                ("description", models.TextField(blank=True)),
                (
                    "raw_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                ("exists", models.BooleanField(default=True)),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="House",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                (
                    "id",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(blank=True, max_length=128)),
                ("description", models.TextField(blank=True)),
                (
                    "raw_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                ("exists", models.BooleanField(default=True)),
                ("prefix", models.CharField(blank=True, max_length=16)),
                ("coa_text", models.TextField(blank=True)),
                (
                    "coa_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        editable=False,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
                (
                    "dynasty",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="houses",
                        to="database.dynasty",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="holysite",
            name="barony",
            field=models.ForeignKey(
                blank=True,
                limit_choices_to={"tier": "barony"},
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="barony_holy_sites",
                related_query_name="holy_sites",
                to="database.title",
            ),
        ),
        migrations.AddField(
            model_name="holysite",
            name="county",
            field=models.ForeignKey(
                blank=True,
                limit_choices_to={"tier": "county"},
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="county_holy_sites",
                related_query_name="holy_sites",
                to="database.title",
            ),
        ),
        migrations.AddField(
            model_name="holysite",
            name="current_user",
            field=models.ForeignKey(
                blank=True,
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="dernier utilisateur",
            ),
        ),
        migrations.CreateModel(
            name="Heritage",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                (
                    "id",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(blank=True, max_length=128)),
                ("description", models.TextField(blank=True)),
                (
                    "raw_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                ("exists", models.BooleanField(default=True)),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Ethos",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                (
                    "id",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(blank=True, max_length=128)),
                ("description", models.TextField(blank=True)),
                (
                    "raw_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                ("exists", models.BooleanField(default=True)),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "ethos",
            },
        ),
        migrations.CreateModel(
            name="Ethnicity",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                (
                    "id",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(blank=True, max_length=128)),
                ("description", models.TextField(blank=True)),
                (
                    "raw_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                ("exists", models.BooleanField(default=True)),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "ethnicities",
            },
        ),
        migrations.CreateModel(
            name="DeathReason",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                (
                    "id",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(blank=True, max_length=128)),
                ("description", models.TextField(blank=True)),
                (
                    "raw_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                ("exists", models.BooleanField(default=True)),
                ("is_default", models.BooleanField(default=False)),
                ("is_natural", models.BooleanField(default=False)),
                ("is_public_knowledge", models.BooleanField(blank=True, null=True)),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="culture",
            name="ethos",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="cultures",
                to="database.ethos",
            ),
        ),
        migrations.AddField(
            model_name="culture",
            name="heritage",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="cultures",
                to="database.heritage",
            ),
        ),
        migrations.AddField(
            model_name="culture",
            name="language",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="cultures",
                to="database.language",
            ),
        ),
        migrations.AddField(
            model_name="culture",
            name="martial_custom",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="cultures",
                to="database.martialcustom",
            ),
        ),
        migrations.AddField(
            model_name="culture",
            name="name_list",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="cultures",
                to="database.namelist",
            ),
        ),
        migrations.AddField(
            model_name="culture",
            name="traditions",
            field=models.ManyToManyField(blank=True, related_name="cultures", to="database.tradition"),
        ),
        migrations.CreateModel(
            name="Character",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                (
                    "id",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(blank=True, max_length=128)),
                ("description", models.TextField(blank=True)),
                (
                    "raw_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                ("exists", models.BooleanField(default=True)),
                ("diplomacy", models.SmallIntegerField(blank=True, null=True)),
                ("martial", models.SmallIntegerField(blank=True, null=True)),
                ("stewardship", models.SmallIntegerField(blank=True, null=True)),
                ("intrigue", models.SmallIntegerField(blank=True, null=True)),
                ("learning", models.SmallIntegerField(blank=True, null=True)),
                ("prowess", models.SmallIntegerField(blank=True, null=True)),
                ("gold", models.SmallIntegerField(blank=True, null=True)),
                ("prestige", models.SmallIntegerField(blank=True, null=True)),
                ("piety", models.SmallIntegerField(blank=True, null=True)),
                (
                    "gender",
                    models.CharField(
                        choices=[("M", "Male"), ("F", "Female")],
                        default="M",
                        max_length=1,
                    ),
                ),
                (
                    "sexuality",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("heterosexual", "Heterosexual"),
                            ("homosexual", "Homosexual"),
                            ("bisexual", "Bisexual"),
                            ("asexual", "Asexual"),
                        ],
                        default="heterosexual",
                        max_length=16,
                    ),
                ),
                ("birth_date", models.DateField(blank=True, null=True)),
                ("death_date", models.DateField(blank=True, null=True)),
                ("random_traits", models.BooleanField(default=True)),
                ("dna_text", models.TextField(blank=True)),
                (
                    "dna_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        editable=False,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                (
                    "culture",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)ss",
                        to="database.culture",
                    ),
                ),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
                (
                    "death_reason",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="characters",
                        to="database.deathreason",
                    ),
                ),
                (
                    "dynasty",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)ss",
                        to="database.dynasty",
                    ),
                ),
                (
                    "father",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="father_children",
                        related_query_name="children",
                        to="database.character",
                    ),
                ),
                (
                    "house",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)ss",
                        to="database.house",
                    ),
                ),
                (
                    "killer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="kills",
                        to="database.character",
                    ),
                ),
                (
                    "mother",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="mother_children",
                        related_query_name="children",
                        to="database.character",
                    ),
                ),
                (
                    "nickname",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)ss",
                        to="database.nickname",
                    ),
                ),
                (
                    "religion",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)ss",
                        to="database.religion",
                    ),
                ),
                (
                    "traits",
                    models.ManyToManyField(blank=True, related_name="characters", to="database.trait"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TitleHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                ("date", models.DateField()),
                ("is_independent", models.BooleanField(blank=True, null=True)),
                ("is_destroyed", models.BooleanField(blank=True, null=True)),
                ("development_level", models.SmallIntegerField(blank=True, null=True)),
                (
                    "raw_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
                (
                    "de_jure_liege",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="database.title",
                    ),
                ),
                (
                    "holder",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="database.character",
                    ),
                ),
                (
                    "liege",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="database.title",
                    ),
                ),
                (
                    "succession_laws",
                    models.ManyToManyField(
                        blank=True,
                        limit_choices_to=models.Q(("group__icontains", "succession")),
                        related_name="title_histories",
                        to="database.law",
                    ),
                ),
                (
                    "title",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="history",
                        to="database.title",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "title histories",
                "unique_together": {("title", "date")},
            },
        ),
        migrations.CreateModel(
            name="TerrainModifier",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                ("damage", models.SmallIntegerField(blank=True, null=True)),
                ("toughness", models.SmallIntegerField(blank=True, null=True)),
                ("pursuit", models.SmallIntegerField(blank=True, null=True)),
                ("screen", models.SmallIntegerField(blank=True, null=True)),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
                (
                    "men_at_arms",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="modifiers",
                        to="database.menatarms",
                    ),
                ),
                (
                    "terrain",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="modifiers",
                        to="database.terrain",
                    ),
                ),
            ],
            options={
                "unique_together": {("men_at_arms", "terrain")},
            },
        ),
        migrations.CreateModel(
            name="ReligionTrait",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                ("is_virtue", models.BooleanField(default=False)),
                ("piety", models.SmallIntegerField(blank=True, null=True)),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
                (
                    "religion",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="traits",
                        to="database.religion",
                    ),
                ),
                (
                    "trait",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="religions",
                        to="database.trait",
                    ),
                ),
            ],
            options={
                "unique_together": {("religion", "trait")},
            },
        ),
        migrations.CreateModel(
            name="DoctrineTrait",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                ("is_virtue", models.BooleanField(default=False)),
                ("piety", models.SmallIntegerField(blank=True, null=True)),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
                (
                    "doctrine",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="traits",
                        to="database.doctrine",
                    ),
                ),
                (
                    "trait",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="doctrines",
                        to="database.trait",
                    ),
                ),
            ],
            options={
                "unique_together": {("doctrine", "trait")},
            },
        ),
        migrations.CreateModel(
            name="CultureEthnicity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                ("chance", models.PositiveSmallIntegerField(blank=True, null=True)),
                (
                    "culture",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ethnicities",
                        to="database.culture",
                    ),
                ),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
                (
                    "ethnicity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cultures",
                        to="database.ethnicity",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "culture ethnicities",
                "unique_together": {("culture", "ethnicity")},
            },
        ),
        migrations.CreateModel(
            name="Counter",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("archer_cavalry", "Archer cavalry"),
                            ("archers", "Archers"),
                            ("camel_cavalry", "Camel cavalry"),
                            ("elephant_cavalry", "Elephant cavalry"),
                            ("heavy_cavalry", "Heavy cavalry"),
                            ("heavy_infantry", "Heavy infantry"),
                            ("light_cavalry", "Light cavalry"),
                            ("pikemen", "Pikemen"),
                            ("siege_weapon", "Siege weapon"),
                            ("skirmishers", "Skirmishers"),
                        ],
                        max_length=16,
                    ),
                ),
                ("factor", models.FloatField(default=1.0)),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
                (
                    "men_at_arms",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="counters",
                        to="database.menatarms",
                    ),
                ),
            ],
            options={
                "unique_together": {("men_at_arms", "type")},
            },
        ),
        migrations.CreateModel(
            name="CharacterHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                ("diplomacy", models.SmallIntegerField(blank=True, null=True)),
                ("martial", models.SmallIntegerField(blank=True, null=True)),
                ("stewardship", models.SmallIntegerField(blank=True, null=True)),
                ("intrigue", models.SmallIntegerField(blank=True, null=True)),
                ("learning", models.SmallIntegerField(blank=True, null=True)),
                ("prowess", models.SmallIntegerField(blank=True, null=True)),
                ("gold", models.SmallIntegerField(blank=True, null=True)),
                ("prestige", models.SmallIntegerField(blank=True, null=True)),
                ("piety", models.SmallIntegerField(blank=True, null=True)),
                ("date", models.DateField()),
                (
                    "event",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("birth", "Birth"),
                            ("death", "Death"),
                            ("other", "Other"),
                        ],
                        max_length=8,
                    ),
                ),
                ("is_unemployed", models.BooleanField(blank=True, null=True)),
                (
                    "raw_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                (
                    "add_best_friend",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="best_friends_added",
                        to="database.character",
                    ),
                ),
                (
                    "add_friends",
                    models.ManyToManyField(
                        blank=True,
                        related_name="friends_added",
                        to="database.character",
                    ),
                ),
                (
                    "add_guardian",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="guardian_added",
                        to="database.character",
                    ),
                ),
                (
                    "add_lovers",
                    models.ManyToManyField(blank=True, related_name="lover_added", to="database.character"),
                ),
                (
                    "add_nemesis",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="nemesis_added",
                        to="database.character",
                    ),
                ),
                (
                    "add_potential_friends",
                    models.ManyToManyField(
                        blank=True,
                        related_name="potential_friends_added",
                        to="database.character",
                    ),
                ),
                (
                    "add_potential_rivals",
                    models.ManyToManyField(
                        blank=True,
                        related_name="potential_rivals_added",
                        to="database.character",
                    ),
                ),
                (
                    "add_rivals",
                    models.ManyToManyField(blank=True, related_name="rivals_added", to="database.character"),
                ),
                (
                    "add_soulmate",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="soulmate_added",
                        to="database.character",
                    ),
                ),
                (
                    "add_spouse",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="spouses_added",
                        to="database.character",
                    ),
                ),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="history",
                        to="database.character",
                    ),
                ),
                (
                    "culture",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)ss",
                        to="database.culture",
                    ),
                ),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
                (
                    "dynasty",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)ss",
                        to="database.dynasty",
                    ),
                ),
                (
                    "employer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="employed",
                        to="database.character",
                    ),
                ),
                (
                    "house",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)ss",
                        to="database.house",
                    ),
                ),
                (
                    "nickname",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)ss",
                        to="database.nickname",
                    ),
                ),
                (
                    "religion",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)ss",
                        to="database.religion",
                    ),
                ),
                (
                    "remove_best_friend",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="best_friends_removed",
                        to="database.character",
                    ),
                ),
                (
                    "remove_friends",
                    models.ManyToManyField(
                        blank=True,
                        related_name="friends_removed",
                        to="database.character",
                    ),
                ),
                (
                    "remove_guardian",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="guardian_removed",
                        to="database.character",
                    ),
                ),
                (
                    "remove_lovers",
                    models.ManyToManyField(
                        blank=True,
                        related_name="lover_removed",
                        to="database.character",
                    ),
                ),
                (
                    "remove_nemesis",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="nemesis_removed",
                        to="database.character",
                    ),
                ),
                (
                    "remove_potential_friends",
                    models.ManyToManyField(
                        blank=True,
                        related_name="potential_friends_removed",
                        to="database.character",
                    ),
                ),
                (
                    "remove_potential_rivals",
                    models.ManyToManyField(
                        blank=True,
                        related_name="potential_rivals_removed",
                        to="database.character",
                    ),
                ),
                (
                    "remove_rivals",
                    models.ManyToManyField(
                        blank=True,
                        related_name="rivals_removed",
                        to="database.character",
                    ),
                ),
                (
                    "remove_soulmate",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="soulmate_removed",
                        to="database.character",
                    ),
                ),
                (
                    "remove_spouse",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="spouses_removed",
                        to="database.character",
                    ),
                ),
                (
                    "traits_added",
                    models.ManyToManyField(blank=True, related_name="traits_added", to="database.trait"),
                ),
                (
                    "traits_removed",
                    models.ManyToManyField(blank=True, related_name="traits_removed", to="database.trait"),
                ),
            ],
            options={
                "verbose_name_plural": "character histories",
                "unique_together": {("character", "date")},
            },
        ),
    ]
