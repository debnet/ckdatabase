# Generated by Django 4.2.1 on 2023-05-24 13:30

import uuid

import common.fields
import common.utils
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("database", "0010_localization_pkey"),
    ]

    operations = [
        migrations.RemoveField(
            model_name="trait",
            name="inherit_chance",
        ),
        migrations.AddField(
            model_name="trait",
            name="birth_chance",
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="trait",
            name="dread_gain_mult",
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="trait",
            name="dread_loss_mult",
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="trait",
            name="random_chance",
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="trait",
            name="stress_gain_mult",
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="trait",
            name="stress_loss_mult",
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name="TraitCompatibility",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                ("score", models.SmallIntegerField(blank=True, null=True)),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
                (
                    "first",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="compatibilities",
                        to="database.trait",
                    ),
                ),
                (
                    "trait",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="database.trait",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "trait compatibilities",
            },
        ),
        migrations.CreateModel(
            name="TraitTrack",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="date de création"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(auto_now=True, verbose_name="date de modification"),
                ),
                ("diplomacy", models.SmallIntegerField(blank=True, null=True)),
                ("martial", models.SmallIntegerField(blank=True, null=True)),
                ("stewardship", models.SmallIntegerField(blank=True, null=True)),
                ("intrigue", models.SmallIntegerField(blank=True, null=True)),
                ("learning", models.SmallIntegerField(blank=True, null=True)),
                ("prowess", models.SmallIntegerField(blank=True, null=True)),
                ("health", models.FloatField(blank=True, null=True)),
                ("fertility", models.FloatField(blank=True, null=True)),
                ("monthly_prestige", models.FloatField(blank=True, null=True)),
                ("monthly_prestige_mult", models.FloatField(blank=True, null=True)),
                ("monthly_piety", models.FloatField(blank=True, null=True)),
                ("monthly_piety_mult", models.FloatField(blank=True, null=True)),
                ("dread_gain_mult", models.FloatField(blank=True, null=True)),
                ("dread_loss_mult", models.FloatField(blank=True, null=True)),
                ("stress_gain_mult", models.FloatField(blank=True, null=True)),
                ("stress_loss_mult", models.FloatField(blank=True, null=True)),
                ("same_opinion", models.SmallIntegerField(blank=True, null=True)),
                ("opposite_opinion", models.SmallIntegerField(blank=True, null=True)),
                ("general_opinion", models.SmallIntegerField(blank=True, null=True)),
                ("attraction_opinion", models.SmallIntegerField(blank=True, null=True)),
                ("vassal_opinion", models.SmallIntegerField(blank=True, null=True)),
                ("liege_opinion", models.SmallIntegerField(blank=True, null=True)),
                ("clergy_opinion", models.SmallIntegerField(blank=True, null=True)),
                ("same_faith_opinion", models.SmallIntegerField(blank=True, null=True)),
                (
                    "same_culture_opinion",
                    models.SmallIntegerField(blank=True, null=True),
                ),
                ("dynasty_opinion", models.SmallIntegerField(blank=True, null=True)),
                ("house_opinion", models.SmallIntegerField(blank=True, null=True)),
                ("ai_energy", models.IntegerField(blank=True, null=True)),
                ("ai_boldness", models.IntegerField(blank=True, null=True)),
                ("ai_compassion", models.IntegerField(blank=True, null=True)),
                ("ai_greed", models.IntegerField(blank=True, null=True)),
                ("ai_honor", models.IntegerField(blank=True, null=True)),
                ("ai_rationality", models.IntegerField(blank=True, null=True)),
                ("ai_sociability", models.IntegerField(blank=True, null=True)),
                ("ai_vengefulness", models.IntegerField(blank=True, null=True)),
                ("ai_zeal", models.IntegerField(blank=True, null=True)),
                ("code", models.CharField(blank=True, max_length=16)),
                ("level", models.PositiveSmallIntegerField()),
                (
                    "raw_data",
                    common.fields.JsonField(
                        blank=True,
                        decoder=common.utils.JsonDecoder,
                        encoder=common.utils.JsonEncoder,
                        null=True,
                    ),
                ),
                (
                    "current_user",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="dernier utilisateur",
                    ),
                ),
                (
                    "trait",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tracks",
                        to="database.trait",
                    ),
                ),
            ],
            options={
                "unique_together": {("trait", "code", "level")},
            },
        ),
    ]
